name: CI/CD Blue-green Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:  # ci
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

# basic quality tool
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test with pytest
      run: |
        pytest

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./app
        file: ./app/Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hello-gitops:${{ github.sha }}, ${{ secrets.DOCKER_USERNAME }}/hello-gitops:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

  deploy: # cd
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    env:
      AWS_CLUSTER_NAME: uku2-cluster
      AWS_REGION: us-east-1

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "3.6.1"

      - name: Install Kubectl (Az)
        uses: azure/setup-kubectl@v3
        id: install

      - name: AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kube config
        run: |
          aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

#      - name: Install kubectl
#        run: |
#          curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
#          chmod +x ./kubectl
#          sudo mv ./kubectl /usr/local/bin/kubectl
#
#      - name: Configure kubectl for EKS
#        run: |
#          aws eks update-kubeconfig --name ${{ env.AWS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
#          kubectl config use-context ${{ env.AWS_CLUSTER_NAME }}

      - name: Check kubectl existance
        run: |
          kubectl config get-contexts

#      - name: Trigger app deployment
#        uses: statsig-io/kubectl-via-eksctl@main
#        env:
#          aws_access_key_id: ${{ secrets.MY_AWS_ACCESS_KEY_ID }}
#          aws_secret_access_key: ${{ secrets.MY_AWS_SECRET_ACCESS_KEY }}
#          region: ${{ env.AWS_REGION }}
#          cluster: ${{ env.AWS_CLUSTER_NAME }}


      - name: Create namespace & set in Kustomize
        run: |
          namespacePresentBlue=`kubectl get ns | grep python-app-blue | wc -l`
          namespacePresentGreen=`kubectl get ns | grep python-app-green | wc -l`
          if [ $namespacePresentBlue -eq 0 ]
          then
             kubectl create ns python-app-blue
             cd k8s
             kustomize edit set namespace python-app-blue
             echo "NEW_NAMESPACE=python-app-blue" >> $GITHUB_ENV
             echo "OLD_NAMESPACE=python-app-green" >> $GITHUB_ENV
          elif [ $namespacePresentGreen -eq 0 ]
          then
             kubectl create ns python-app-green
             cd k8s
             kustomize edit set namespace python-app-green
             echo "NEW_NAMESPACE=python-app-green" >> $GITHUB_ENV
             echo "OLD_NAMESPACE=python-app-blue" >> $GITHUB_ENV
          else
             echo "Both Blue and Green namespaces are present! Exiting"
             exit 1
          fi

      - name: Update Kubernetes resources
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          cd k8s
          kustomize edit set image hello-gitops=$DOCKER_USERNAME/hello-gitops:$GITHUB_SHA
          cat kustomization.yaml

      - name: Deploy updated Kubernetes resources
        run: |
          kubectl apply -k k8s/ 

      # DO SOME CHECKS HERE BEFORE COMMIT
      #- name: Deploy updated Kubernetes resources
      #  run: |
      #    kubectl apply -k k8s/

      # REMOVE OLD DEPLOYMENT!!
      - name: Remove old namespace
        run: |
          namespacePresentOld=`kubectl get ns | grep ${{ env.OLD_NAMESPACE }} | wc -l`
          if [ $namespacePresentOld -eq 1 ]
          then
            kubectl delete ns ${{ env.OLD_NAMESPACE }} --wait=true
          fi

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Bump docker tag"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

